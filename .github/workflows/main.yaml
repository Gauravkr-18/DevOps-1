name: Deploy to Staging (EC2)

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

concurrency:
  group: main-deploy
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure backend folder permissions
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p /home/${{ secrets.EC2_USER }}/backend
            sudo chown -R $USER:$USER /home/${{ secrets.EC2_USER }}/backend
            sudo chmod -R u+rwX /home/${{ secrets.EC2_USER }}/backend

      - name: Upload project to EC2 (SCP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: .
          target: /home/${{ secrets.EC2_USER }}/backend
          overwrite: true

      - name: Deploy on EC2 using Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            # Navigate to the correct directory where docker-compose.yml exists
            cd /home/${{ secrets.EC2_USER }}/backend

            # Debug: Check current directory and files
            echo "Current directory: $(pwd)"
            echo "Files in current directory:"
            ls -la

            # Add user to docker group to avoid permission issues
            echo "Adding user to docker group..."
            sudo usermod -aG docker $USER || true
            newgrp docker || true

            # Install Docker Compose v2 using Docker plugin (AWS Linux compatible)
            echo "Checking Docker Compose installation..."
            if ! docker compose version &> /dev/null; then
              echo "Installing Docker Compose plugin..."
              sudo mkdir -p /usr/local/lib/docker/cli-plugins
              sudo curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
              sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            fi

            # Check if docker-compose.yml exists
            if [ ! -f "docker-compose.yml" ]; then
              echo "Error: docker-compose.yml not found in $(pwd)"
              echo "Available files:"
              find . -name "*.yml" -o -name "*.yaml" | head -10
              exit 1
            fi

            # Stop any processes using port 30
            echo "Checking for processes using port 30..."
            sudo fuser -k 30/tcp 2>/dev/null || true

            # Stop and remove any existing containers using docker compose
            echo "Stopping existing containers..."
            sudo docker compose down --remove-orphans || true
            
            # Remove any dangling containers with the same name
            sudo docker rm -f django_app 2>/dev/null || true

            # Clean up unused Docker resources
            sudo docker system prune -f || true

            # Build and start new containers
            echo "Starting new containers..."
            sudo docker compose up -d --build

            # Check container status
            echo "Container status:"
            sudo docker ps